{"version":3,"sources":["components/ChatMessage.jsx","components/ChatRoom.jsx","components/SignIn.jsx","components/SignOut.jsx","App.js","serviceWorker.js","index.js"],"names":["ChatMessage","text","messageClass","uid","window","auth","currentUser","className","ChatRoom","messagesRef","firestore","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","value","setValue","dummy","useRef","submitHandler","e","a","preventDefault","add","createdAt","firebase","FieldValue","serverTimestamp","useEffect","current","scrollIntoView","behavior","map","msg","key","id","ref","onSubmit","action","type","onChange","target","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","signOut","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","useAuthState","user","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAEaA,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,KAErBC,EAFoC,EAATC,MAEJC,OAAOC,KAAKC,YAAYH,IAAM,OAAS,WAEpE,OACE,yBAAKI,UAAS,kBAAaL,IAC3B,uBAAGK,UAAW,gBAAiBN,KCJtBO,EAAW,WAEtB,IAAMC,EAAcL,OAAOM,UAAUC,WAAW,YAC1CC,EAAQH,EAAYI,QAAQ,aAAaC,MAAM,IAHzB,EAITC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAJqB,sBAKFC,mBAAS,IALP,mBAKrBC,EALqB,KAKdC,EALc,KAMtBC,EAAQC,mBAURC,EAAa,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACpBD,EAAEE,iBACGP,EAFe,wDAGbhB,EAAOC,OAAOC,KAAKC,YAAnBH,IAHa,SAIdM,EAAYkB,IAAI,CACpB1B,KAAMkB,EACNS,UAAWxB,OAAOyB,SAASnB,UAAUoB,WAAWC,kBAChD5B,QAPkB,OASpBiB,EAAS,IATW,2CAAH,sDAgBnB,OAJAY,qBAAU,WAnBRX,EAAMY,QAAQC,eAAe,CAAEC,SAAU,aAqBxC,CAAClB,IAGF,yBAAKV,UAAW,aACd,8BACE,yBAAKA,UAAW,YACZU,GAAYA,EAASmB,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAaC,IAAKD,EAAIE,GAAIpC,IAAKkC,EAAIlC,IAAKF,KAAMoC,EAAIpC,WAEtF,0BAAMuC,IAAKnB,KAGb,0BAAMoB,SAAUlB,EAAemB,OAAO,IACpC,2BAAOC,KAAK,OAAOxB,MAAOA,EAAOyB,SA9BjB,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACtBzB,EAASyB,EAAO1B,UA8BZ,4BAAQwB,KAAM,UAAd,mBC3CKG,EAAS,WAOpB,OACE,4BAAQvC,UAAW,UAAWwC,QANX,WACnB,IAAMC,EAAW,IAAInB,IAASxB,KAAK4C,mBACnC7C,OAAOC,KAAK6C,gBAAgBF,KAI5B,WCVSG,EAAU,WACrB,OACE,4BAAQ5C,UAAW,WAAYwC,QAAS,kBAAM3C,OAAOC,KAAK+C,YAA1D,aCQJhD,OAAOyB,SAAWA,IAElBA,IAASwB,cAAc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAGT,IAAMvD,EAAOD,OAAOC,KAAOwB,IAASxB,OAClBD,OAAOM,UAAYmB,IAASnB,YAkB/BmD,MAff,WAAgB,IAAD,EACEC,YAAazD,GAArB0D,EADM,oBAGb,OACE,yBAAKxD,UAAU,OACb,gCACGwD,GAAQ,kBAAC,EAAD,OAEX,iCACGA,EAAO,kBAAC,EAAD,MAAe,kBAAC,EAAD,SCzBXC,QACW,cAA7B5D,OAAO6D,SAASC,UAEe,UAA7B9D,OAAO6D,SAASC,UAEhB9D,OAAO6D,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.93c93549.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const ChatMessage = ({text, uid}) => {\r\n\r\n  const messageClass = uid === window.auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n  return (\r\n    <div className={`message ${messageClass}`}>\r\n    <p className={'chat-message'}>{text}</p>\r\n\r\n    </div>\r\n  )\r\n}\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {useCollectionData} from \"react-firebase-hooks/firestore\";\r\nimport {ChatMessage} from \"./ChatMessage\";\r\n\r\nexport const ChatRoom = () => {\r\n\r\n  const messagesRef = window.firestore.collection('messages')\r\n  const query = messagesRef.orderBy('createdAt').limit(25)\r\n  const [messages] = useCollectionData(query, {idField: 'id'})\r\n  const [value, setValue] = useState('')\r\n  const dummy = useRef()\r\n\r\n  const scrollToBottom = () => {\r\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n\r\n  const changeHandler = ({target}) => {\r\n    setValue(target.value)\r\n  }\r\n\r\n  const submitHandler = async (e) => {\r\n    e.preventDefault()\r\n    if (!value) return;\r\n    const {uid} = window.auth.currentUser;\r\n    await messagesRef.add({\r\n      text: value,\r\n      createdAt: window.firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n    })\r\n    setValue('');\r\n  }\r\n\r\n  useEffect(() => {\r\n    scrollToBottom()\r\n  }, [messages])\r\n\r\n  return (\r\n    <div className={'chat-room'}>\r\n      <main>\r\n        <div className={'messages'}>\r\n          { messages && messages.map(msg => <ChatMessage key={msg.id} uid={msg.uid} text={msg.text}/>) }\r\n        </div>\r\n        <span ref={dummy} />\r\n      </main>\r\n\r\n      <form onSubmit={submitHandler} action=\"\">\r\n        <input type=\"text\" value={value} onChange={changeHandler}/>\r\n        <button type={\"submit\"}>send message</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport firebase from 'firebase/app'\r\n\r\n\r\nexport const SignIn = () => {\r\n\r\n  const clickHandler = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    window.auth.signInWithPopup(provider);\r\n  }\r\n\r\n  return (\r\n    <button className={'sign-in'} onClick={clickHandler}>SignIn</button>\r\n  )\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\nexport const SignOut = () => {\r\n  return (\r\n    <button className={'sign-out'} onClick={() => window.auth.signOut()}>Sign Out</button>\r\n  )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nimport {useAuthState} from 'react-firebase-hooks/auth'\nimport {userCollectionData} from 'react-firebase-hooks/firestore'\nimport {ChatRoom} from \"./components/ChatRoom\";\nimport {SignIn, signOut} from \"./components/SignIn\";\nimport {SignOut} from \"./components/SignOut\";\n\nwindow.firebase = firebase;\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDdVnvj1i5VgUlL3hptGg1G4arMHuTym_E\",\n  authDomain: \"ef-firebase-chat.firebaseapp.com\",\n  databaseURL: \"https://ef-firebase-chat.firebaseio.com\",\n  projectId: \"ef-firebase-chat\",\n  storageBucket: \"ef-firebase-chat.appspot.com\",\n  messagingSenderId: \"745352694641\",\n  appId: \"1:745352694641:web:d679749f42efb1013dc4d0\"\n})\n\nconst auth = window.auth = firebase.auth()\nconst firestore = window.firestore = firebase.firestore()\n\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        {user && <SignOut />}\n      </header>\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}